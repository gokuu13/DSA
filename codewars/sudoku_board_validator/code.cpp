#include <iostream>
#include <assert.h>

#include <array>
#include <utility>
#include <string>
#include <sstream>
#include <vector>

typedef std::array<int, 9> Row;
typedef std::array<Row, 9> Board;
typedef std::pair <Board, bool> TestCase;


bool validate(const std::array<std::array<int, 9>, 9>& board) {
    for(int i(0); i < 9; i++)
    {
        std::vector<int> col(9, 1);
        std::vector<int> row(9, 1);
        for(int j(0); j < 9; j++)
        {
            if(board.at(i).at(j) == 0 || board.at(j).at(i) == 0)
            {
                return false;
            }
            if(col[board.at(i).at(j) - 1]-- == 0)
            {
                return false;
            }
            else if(row[board.at(j).at(i) - 1]-- == 0)
            {
                return false;
            }
        }
    }
    for(int i(0); i < 3; i++)
    {
        for(int j(0); j < 3; j++)
        {
            std::vector<int> subgrid(9, 1);
            for(int k(0); k < 3; k++)
            {
                for(int l(0); l < 3; l++)
                {
                    if(board.at(i * 3 + k).at(j * 3 + l) == 0 || subgrid[board.at(i * 3 + k).at(j * 3 + l) - 1]-- == 0)
                    {
                        return false;
                    }
                }
            }
        }
    }
    return true;
}

std::string stringify(const Board& board) {

        std::ostringstream strBoard;
        auto appendRow = [&](const Row& row) { strBoard << row[0] << row[1] << row[2] << '|' << row[3] << row[4] << row[5] << '|' << row[6] << row[7] << row[8] << '\n'; };
        appendRow(board[0]); appendRow(board[1]); appendRow(board[2]);
        strBoard << "---+---+---\n";
        appendRow(board[3]); appendRow(board[4]); appendRow(board[5]);
        strBoard << "---+---+---\n";
        appendRow(board[6]); appendRow(board[7]); appendRow(board[8]);
        
        return strBoard.str();
    }

int main()
{

    const TestCase exampleTests[] = {
    {{{
        {5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5}}}, false}, // A board full of fives
    {{{
        {1,2,3,4,5,6,7,8,9},
        {1,2,3,4,5,6,7,8,9},
        {1,2,3,4,5,6,7,8,9},
        {1,2,3,4,5,6,7,8,9},
        {1,2,3,4,5,6,7,8,9},
        {1,2,3,4,5,6,7,8,9},
        {1,2,3,4,5,6,7,8,9},
        {1,2,3,4,5,6,7,8,9},
        {1,2,3,4,5,6,7,8,9}}}, false}, // All rows are 1..9
    {{{
        {1,1,1,1,1,1,1,1,1},
        {2,2,2,2,2,2,2,2,2},
        {3,3,3,3,3,3,3,3,3},
        {4,4,4,4,4,4,4,4,4},
        {5,5,5,5,5,5,5,5,5},
        {6,6,6,6,6,6,6,6,6},
        {7,7,7,7,7,7,7,7,7},
        {8,8,8,8,8,8,8,8,8},
        {9,9,9,9,9,9,9,9,9}}}, false},  // All cols are 1..9
    {{{
        {5,3,4,6,7,8,9,1,2},
        {6,7,2,1,9,5,3,4,8},
        {1,9,8,3,4,2,5,6,7},
        {8,5,9,7,6,1,4,2,3},
        {4,2,6,8,5,3,7,9,1},
        {7,1,3,9,2,4,8,5,6},
        {9,6,1,5,3,7,2,8,4},
        {2,8,7,4,1,9,6,3,5},
        {3,4,5,2,8,6,1,7,9}}}, true},
    {{{
        {1,3,2,5,7,9,4,6,8},
        {4,9,8,2,6,1,3,7,5},
        {7,5,6,3,8,4,2,1,9},
        {6,4,3,1,5,8,7,9,2},
        {5,2,1,7,9,3,8,4,6},
        {9,8,7,4,2,6,5,3,1},
        {2,1,4,9,3,5,6,8,7},
        {3,6,5,8,1,7,9,2,4},
        {8,7,9,6,4,2,1,5,3}}}, true},
    {{{
        {7,8,4,1,5,9,3,2,6},
        {5,3,9,6,7,2,8,4,1},
        {6,1,2,4,3,8,7,5,9},
        {9,2,8,7,1,5,4,6,3},
        {3,5,7,8,4,6,1,9,2},
        {4,6,1,9,2,3,5,8,7},
        {8,7,6,3,9,4,2,1,5},
        {2,4,3,5,6,1,9,7,8},
        {1,9,5,2,8,7,6,3,4}}}, true},
    {{{
        {9,2,6,5,8,3,4,7,1},
        {7,1,3,4,2,6,9,8,5},
        {8,4,5,9,7,1,3,6,2},
        {3,6,2,8,5,7,1,4,9},
        {4,7,1,2,6,9,5,3,8},
        {5,9,8,3,1,4,7,2,6},
        {6,5,7,1,3,8,2,9,4},
        {2,8,4,7,9,5,6,1,3},
        {1,3,9,6,4,2,8,5,7}}}, true},
    {{{
        {7,1,5,6,2,3,8,4,9},
        {6,2,4,8,1,9,3,7,5},
        {3,9,8,7,4,5,6,2,1},
        {5,3,9,2,7,6,4,1,8},
        {4,6,2,1,9,8,5,3,7},
        {8,7,1,5,3,4,9,6,2},
        {2,5,3,9,6,7,1,8,4},
        {1,8,6,4,5,2,7,9,3},
        {9,4,7,3,8,1,2,5,6}}}, true},
    {{{
        {7,8,3,4,5,6,1,2,9},
        {6,9,2,1,8,7,3,4,5},
        {1,4,5,2,3,9,6,7,8},
        {8,1,7,3,6,2,9,5,4},
        {5,6,4,7,9,8,2,1,3},
        {3,2,9,5,4,1,8,6,7},
        {4,7,6,8,2,3,5,9,1},
        {9,3,1,6,7,5,4,8,2},
        {2,5,8,9,1,4,7,3,6}}}, true},
    {{{
        {1,7,3,2,6,8,9,5,4},
        {4,2,5,1,9,3,7,6,8},
        {8,6,9,7,4,5,1,2,3},
        {6,1,2,8,3,7,4,9,5},
        {3,9,8,4,5,6,2,1,7},
        {5,4,7,9,1,2,3,8,6},
        {9,5,4,3,8,1,6,7,2},
        {2,3,6,5,7,9,8,4,1},
        {7,8,1,6,2,4,5,3,9}}}, true},
    {{{
        {8,4,7,2,6,5,1,9,3},
        {1,3,6,7,9,8,2,4,5},
        {9,5,2,1,4,3,8,6,7},
        {4,2,9,6,7,1,5,3,8},
        {6,7,8,5,3,2,9,1,4},
        {3,1,5,4,8,9,7,2,6},
        {5,6,4,9,1,7,3,8,2},
        {7,8,1,3,2,4,6,5,9},
        {2,9,3,8,5,6,4,7,1}}}, true},
    {{{
        {8,4,7,2,6,5,1,0,3},
        {1,3,6,7,0,8,2,4,5},
        {0,5,2,1,4,3,8,6,7},
        {4,2,0,6,7,1,5,3,8},
        {6,7,8,5,3,2,0,1,4},
        {3,1,5,4,8,0,7,2,6},
        {5,6,4,0,1,7,3,8,2},
        {7,8,1,3,2,4,6,5,0},
        {2,0,3,8,5,6,4,7,1}}}, false}, // a valid board, but with 0 instead of 9
    {{{
        {1,3,2,5,7,9,4,6,8},
        {4,9,8,2,6,1,3,7,5},
        {7,5,6,3,8,4,2,1,9},
        {6,4,3,1,5,8,7,9,2},
        {5,2,1,7,9,3,8,4,6},
        {9,8,7,4,2,6,5,3,1},
        {2,1,4,9,3,5,6,8,7},
        {3,6,5,8,1,7,9,2,4},
        {8,7,9,6,4,2,1,3,5}}}, false}, // duplicated '3' in eighth column
    {{{
        {1,2,3,4,5,6,7,8,9},
        {2,3,4,5,6,7,8,9,1},
        {3,4,5,6,7,8,9,1,2},
        {4,5,6,7,8,9,1,2,3},
        {5,6,7,8,9,1,2,3,4},
        {6,7,8,9,1,2,3,4,5},
        {7,8,9,1,2,3,4,5,6},
        {8,9,1,2,3,4,5,6,7},
        {9,1,2,3,4,5,6,7,8}}}, false}, // valid rows and cols, but invalid boxes
    {{{
        {0,3,4,6,7,8,9,1,2},
        {6,7,2,1,9,5,3,4,8},
        {1,9,8,3,4,2,5,6,7},
        {8,5,9,7,6,1,4,2,3},
        {4,2,6,8,5,3,7,9,1},
        {7,1,3,9,2,4,8,5,6},
        {9,6,1,5,3,7,2,8,4},
        {2,8,7,4,1,9,6,3,5},
        {3,4,5,2,8,6,1,7,9}}}, false},
    {{{
        {1,2,3,4,5,6,6,9,9},
        {4,5,6,6,9,9,1,2,3},
        {6,9,9,1,2,3,4,5,6},
        {2,3,4,5,6,6,9,9,1},
        {5,6,6,9,9,1,2,3,4},
        {9,9,1,2,3,4,5,6,6},
        {3,4,5,6,6,9,9,1,2},
        {6,6,9,9,1,2,3,4,5},
        {9,1,2,3,4,5,6,6,9}}}, false},
    {{{
        {1,2,3,1,2,3,1,2,3},
        {4,5,6,4,5,6,4,5,6},
        {7,8,9,7,8,9,7,8,9},
        {2,3,1,2,3,1,2,3,1},
        {5,6,4,5,6,4,5,6,4},
        {8,9,7,8,9,7,8,9,7},
        {3,1,2,3,1,2,3,1,2},
        {6,4,5,6,4,5,6,4,5},
        {9,7,8,9,7,8,9,7,8}}}, false},
    {{{
        {1,2,3,4,5,6,7,8,9},
        {4,5,6,7,8,9,1,2,3},
        {7,8,9,1,2,3,4,5,6},
        {1,2,3,4,5,6,7,8,9},
        {4,5,6,7,8,9,1,2,3},
        {7,8,9,1,2,3,4,5,6},
        {1,2,3,4,5,6,7,8,9},
        {4,5,6,7,8,9,1,2,3},
        {7,8,9,1,2,3,4,5,6}}}, false}  // valid boxes and rows, repeats in cols
    };

    for (const TestCase& test : exampleTests) {
        std::cout<<stringify(test.first)<<std::endl;
        assert(validate(test.first) == test.second);
    }

    return 0;    
};
